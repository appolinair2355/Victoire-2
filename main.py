import os
import asyncio
import re
import json
import zipfile
import tempfile
import shutil
from datetime import datetime
from telethon import TelegramClient, events
from telethon.events import ChatAction
from dotenv import load_dotenv
from predictor import CardPredictor
from yaml_manager import init_database, db
from excel_importer import ExcelPredictionManager
from aiohttp import web
import threading

# Load environment variables
load_dotenv()

# --- CONFIGURATION ---
try:
    API_ID = int(os.getenv('API_ID') or '0')
    API_HASH = os.getenv('API_HASH') or ''
    BOT_TOKEN = os.getenv('BOT_TOKEN') or ''
    ADMIN_ID = int(os.getenv('ADMIN_ID') or '0') if os.getenv('ADMIN_ID') else None
    PORT = int(os.getenv('PORT') or '10000')
    DISPLAY_CHANNEL = int(os.getenv('DISPLAY_CHANNEL') or '-1002999811353')

    # Validation des variables requises
    if not API_ID or API_ID == 0:
        raise ValueError("API_ID manquant ou invalide")
    if not API_HASH:
        raise ValueError("API_HASH manquant")
    if not BOT_TOKEN:
        raise ValueError("BOT_TOKEN manquant")

    print(f"‚úÖ Configuration charg√©e: API_ID={API_ID}, ADMIN_ID={ADMIN_ID or 'Non configur√©'}, PORT={PORT}, DISPLAY_CHANNEL={DISPLAY_CHANNEL}")
except Exception as e:
    print(f"‚ùå Erreur configuration: {e}")
    print("V√©rifiez vos variables d'environnement")
    exit(1)

# Fichier de configuration persistante
CONFIG_FILE = 'bot_config.json'

# Variables d'√©tat
detected_stat_channel = None
detected_display_channel = None
confirmation_pending = {}
prediction_interval = 5  # Intervalle en minutes avant de chercher "A" (d√©faut: 5 min)

def load_config():
    """Load configuration with priority: JSON > Database > Environment"""
    global detected_stat_channel, detected_display_channel, prediction_interval
    try:
        # Toujours essayer JSON en premier (source de v√©rit√©)
        if os.path.exists(CONFIG_FILE):
            with open(CONFIG_FILE, 'r', encoding='utf-8') as f:
                config = json.load(f)
                detected_stat_channel = config.get('stat_channel')
                detected_display_channel = config.get('display_channel', DISPLAY_CHANNEL)
                prediction_interval = config.get('prediction_interval', 1)
                print(f"‚úÖ Configuration charg√©e depuis JSON: Stats={detected_stat_channel}, Display={detected_display_channel}, Intervalle={prediction_interval}min")
                return

        # Fallback sur base de donn√©es si JSON n'existe pas
        if db:
            detected_stat_channel = db.get_config('stat_channel')
            detected_display_channel = db.get_config('display_channel') or DISPLAY_CHANNEL
            interval_config = db.get_config('prediction_interval')
            if detected_stat_channel:
                detected_stat_channel = int(detected_stat_channel)
            if detected_display_channel:
                detected_display_channel = int(detected_display_channel)
            if interval_config:
                prediction_interval = int(interval_config)
            print(f"‚úÖ Configuration charg√©e depuis la DB: Stats={detected_stat_channel}, Display={detected_display_channel}, Intervalle={prediction_interval}min")
        else:
            # Utiliser le canal de display par d√©faut depuis les variables d'environnement
            detected_display_channel = DISPLAY_CHANNEL
            prediction_interval = 1
            print(f"‚ÑπÔ∏è Configuration par d√©faut: Display={detected_display_channel}, Intervalle={prediction_interval}min")
    except Exception as e:
        print(f"‚ö†Ô∏è Erreur chargement configuration: {e}")
        # Valeurs par d√©faut en cas d'erreur
        detected_stat_channel = None
        detected_display_channel = DISPLAY_CHANNEL
        prediction_interval = 1

def save_config():
    """Save configuration to database and JSON backup"""
    try:
        if db:
            # Sauvegarde en base de donn√©es
            db.set_config('stat_channel', detected_stat_channel)
            db.set_config('display_channel', detected_display_channel)
            db.set_config('prediction_interval', prediction_interval)
            print("üíæ Configuration sauvegard√©e en base de donn√©es")

        # Sauvegarde JSON de secours
        config = {
            'stat_channel': detected_stat_channel,
            'display_channel': detected_display_channel,
            'prediction_interval': prediction_interval
        }
        with open(CONFIG_FILE, 'w', encoding='utf-8') as f:
            json.dump(config, f, indent=2)
        print(f"üíæ Configuration sauvegard√©e: Stats={detected_stat_channel}, Display={detected_display_channel}, Intervalle={prediction_interval}min")
    except Exception as e:
        print(f"‚ùå Erreur sauvegarde configuration: {e}")

def update_channel_config(source_id: int, target_id: int):
    """Update channel configuration"""
    global detected_stat_channel, detected_display_channel
    detected_stat_channel = source_id
    detected_display_channel = target_id
    save_config()

# Initialize database
database = init_database()

# Gestionnaire de pr√©dictions
predictor = CardPredictor()

# Gestionnaire d'importation Excel
excel_manager = ExcelPredictionManager()

# Initialize Telegram client with unique session name
import time
session_name = f'bot_session_{int(time.time())}'
client = TelegramClient(session_name, API_ID, API_HASH)

async def start_bot():
    """Start the bot with proper error handling"""
    try:
        # Load saved configuration first
        load_config()

        await client.start(bot_token=BOT_TOKEN)
        print("Bot d√©marr√© avec succ√®s...")

        # Get bot info
        me = await client.get_me()
        username = getattr(me, 'username', 'Unknown') or f"ID:{getattr(me, 'id', 'Unknown')}"
        print(f"Bot connect√©: @{username}")

    except Exception as e:
        print(f"Erreur lors du d√©marrage du bot: {e}")
        return False

    return True

# --- INVITATION / CONFIRMATION ---
@client.on(events.ChatAction())
async def handler_join(event):
    """Handle bot joining channels/groups"""
    global confirmation_pending

    try:
        # Ignorer les √©v√©nements d'√©pinglage de messages
        if event.new_pin or event.unpin:
            return

        # Ignorer les √©v√©nements sans user_id (comme les √©pinglages)
        if not event.user_id:
            return

        print(f"ChatAction event: {event}")
        print(f"user_joined: {event.user_joined}, user_added: {event.user_added}")
        print(f"user_id: {event.user_id}, chat_id: {event.chat_id}")

        if event.user_joined or event.user_added:
            me = await client.get_me()
            me_id = getattr(me, 'id', None)
            print(f"Mon ID: {me_id}, Event user_id: {event.user_id}")

            if event.user_id == me_id:
                confirmation_pending[event.chat_id] = 'waiting_confirmation'

                # Get channel info
                try:
                    chat = await client.get_entity(event.chat_id)
                    chat_title = getattr(chat, 'title', f'Canal {event.chat_id}')
                except:
                    chat_title = f'Canal {event.chat_id}'

                # Send private invitation to admin
                invitation_msg = f"""üîî **Nouveau canal d√©tect√©**

üìã **Canal** : {chat_title}
üÜî **ID** : {event.chat_id}

**Choisissez le type de canal** :
‚Ä¢ `/set_stat {event.chat_id}` - Canal de statistiques
‚Ä¢ `/set_display {event.chat_id}` - Canal de diffusion

Envoyez votre choix en r√©ponse √† ce message."""

                try:
                    await client.send_message(ADMIN_ID, invitation_msg)
                    print(f"Invitation envoy√©e √† l'admin pour le canal: {chat_title} ({event.chat_id})")
                except Exception as e:
                    print(f"Erreur envoi invitation priv√©e: {e}")
                    # Fallback: send to the channel temporarily for testing
                    await client.send_message(event.chat_id, f"‚ö†Ô∏è Impossible d'envoyer l'invitation priv√©e. Canal ID: {event.chat_id}")
                    print(f"Message fallback envoy√© dans le canal {event.chat_id}")
    except Exception as e:
        print(f"Erreur dans handler_join: {e}")

@client.on(events.NewMessage(pattern=r'/set_stat (-?\d+)'))
async def set_stat_channel(event):
    """Set statistics channel (only admin in private)"""
    global detected_stat_channel, confirmation_pending

    try:
        # Only allow in private chat with admin
        if event.is_group or event.is_channel:
            return

        if ADMIN_ID and event.sender_id != ADMIN_ID:
            await event.respond("‚ùå Seul l'administrateur peut configurer les canaux")
            return

        # Extract channel ID from command
        match = event.pattern_match
        channel_id = int(match.group(1))

        # Check if channel is waiting for confirmation
        if channel_id not in confirmation_pending:
            await event.respond("‚ùå Ce canal n'est pas en attente de configuration")
            return

        detected_stat_channel = channel_id
        confirmation_pending[channel_id] = 'configured_stat'

        # Save configuration
        save_config()

        try:
            chat = await client.get_entity(channel_id)
            chat_title = getattr(chat, 'title', f'Canal {channel_id}')
        except:
            chat_title = f'Canal {channel_id}'

        await event.respond(f"‚úÖ **Canal de statistiques configur√©**\nüìã {chat_title}\n\n‚ú® Le bot surveillera ce canal pour les pr√©dictions - d√©velopp√© par Sossou Kouam√© Appolinaire\nüíæ Configuration sauvegard√©e automatiquement")
        print(f"Canal de statistiques configur√©: {channel_id}")

    except Exception as e:
        print(f"Erreur dans set_stat_channel: {e}")

@client.on(events.NewMessage(pattern=r'/force_set_stat (-?\d+)'))
async def force_set_stat_channel(event):
    """Force set statistics channel without waiting for invitation (admin only)"""
    global detected_stat_channel

    try:
        # Only allow admin
        if ADMIN_ID and event.sender_id != ADMIN_ID:
            await event.respond("‚ùå Seul l'administrateur peut configurer les canaux")
            return

        # Extract channel ID from command
        match = event.pattern_match
        channel_id = int(match.group(1))

        detected_stat_channel = channel_id

        # Save configuration
        save_config()

        try:
            chat = await client.get_entity(channel_id)
            chat_title = getattr(chat, 'title', f'Canal {channel_id}')
        except:
            chat_title = f'Canal {channel_id}'

        await event.respond(f"‚úÖ **Canal de statistiques configur√© (force)**\nüìã {chat_title}\nüÜî ID: {channel_id}\n\n‚ú® Le bot surveillera ce canal pour les pr√©dictions\nüíæ Configuration sauvegard√©e automatiquement")
        print(f"Canal de statistiques configur√© (force): {channel_id}")

    except Exception as e:
        print(f"Erreur dans force_set_stat_channel: {e}")
        await event.respond(f"‚ùå Erreur: {e}")

@client.on(events.NewMessage(pattern=r'/set_display (-?\d+)'))
async def set_display_channel(event):
    """Set display channel (only admin in private)"""
    global detected_display_channel, confirmation_pending

    try:
        # Only allow in private chat with admin
        if event.is_group or event.is_channel:
            return

        if event.sender_id != ADMIN_ID:
            await event.respond("‚ùå Seul l'administrateur peut configurer les canaux")
            return

        # Extract channel ID from command
        match = event.pattern_match
        channel_id = int(match.group(1))

        # Check if channel is waiting for confirmation
        if channel_id not in confirmation_pending:
            await event.respond("‚ùå Ce canal n'est pas en attente de configuration")
            return

        detected_display_channel = channel_id
        confirmation_pending[channel_id] = 'configured_display'

        # Save configuration
        save_config()

        try:
            chat = await client.get_entity(channel_id)
            chat_title = getattr(chat, 'title', f'Canal {channel_id}')
        except:
            chat_title = f'Canal {channel_id}'

        await event.respond(f"‚úÖ **Canal de diffusion configur√©**\nüìã {chat_title}\n\nüöÄ Le bot publiera les pr√©dictions dans ce canal - d√©velopp√© par Sossou Kouam√© Appolinaire\nüíæ Configuration sauvegard√©e automatiquement")
        print(f"Canal de diffusion configur√©: {channel_id}")

    except Exception as e:
        print(f"Erreur dans set_display_channel: {e}")

@client.on(events.NewMessage(pattern=r'/force_set_display (-?\d+)'))
async def force_set_display_channel(event):
    """Force set display channel without waiting for invitation (admin only)"""
    global detected_display_channel

    try:
        # Only allow admin
        if ADMIN_ID and event.sender_id != ADMIN_ID:
            await event.respond("‚ùå Seul l'administrateur peut configurer les canaux")
            return

        # Extract channel ID from command
        match = event.pattern_match
        channel_id = int(match.group(1))

        detected_display_channel = channel_id

        # Save configuration
        save_config()

        try:
            chat = await client.get_entity(channel_id)
            chat_title = getattr(chat, 'title', f'Canal {channel_id}')
        except:
            chat_title = f'Canal {channel_id}'

        await event.respond(f"‚úÖ **Canal de diffusion configur√© (force)**\nüìã {chat_title}\nüÜî ID: {channel_id}\n\nüöÄ Le bot publiera les pr√©dictions dans ce canal\nüíæ Configuration sauvegard√©e automatiquement")
        print(f"Canal de diffusion configur√© (force): {channel_id}")

    except Exception as e:
        print(f"Erreur dans force_set_display_channel: {e}")
        await event.respond(f"‚ùå Erreur: {e}")

# --- COMMANDES DE BASE ---
@client.on(events.NewMessage(pattern='/start'))
async def start_command(event):
    """Send welcome message when user starts the bot"""
    try:
        welcome_msg = """üéØ **Bot de Pr√©diction de Cartes - Bienvenue !**

üîπ **D√©velopp√© par Sossou Kouam√© Appolinaire**

**Fonctionnalit√©s** :
‚Ä¢ üìä Import de pr√©dictions depuis fichier Excel
‚Ä¢ üîç Surveillance automatique du canal source
‚Ä¢ üéØ Lancement des pr√©dictions bas√© sur le fichier Excel
‚Ä¢ ‚úÖ V√©rification des r√©sultats avec offsets (0, 1, 2)

**Configuration** :
1. Ajoutez-moi dans vos canaux
2. Je vous enverrai automatiquement une invitation priv√©e
3. R√©pondez avec `/set_stat [ID]` ou `/set_display [ID]`
4. Envoyez votre fichier Excel (.xlsx) pour importer les pr√©dictions

**Commandes** :
‚Ä¢ `/start` - Ce message
‚Ä¢ `/status` - √âtat du bot (admin)
‚Ä¢ `/excel_status` - Statut des pr√©dictions Excel (admin)
‚Ä¢ `/excel_clear` - Effacer les pr√©dictions Excel (admin)
‚Ä¢ `/sta` - Statistiques Excel (admin)
‚Ä¢ `/reset` - R√©initialiser (admin)

**Format Excel** :
Le fichier doit contenir 3 colonnes :
‚Ä¢ Date & Heure
‚Ä¢ Num√©ro (ex: 881, 886, 891...)
‚Ä¢ Victoire (Joueur ou Banquier)

**Format de pr√©diction** :
‚Ä¢ V1 pour victoire Joueur : üîµXXX üîµV1‚úçüèª: statut :‚è≥
‚Ä¢ V2 pour victoire Banquier : üîµXXX üîµV2‚úçüèª: statut :‚è≥

Le bot est pr√™t √† analyser vos jeux ! üöÄ"""

        await event.respond(welcome_msg)
        print(f"Message de bienvenue envoy√© √† l'utilisateur {event.sender_id}")

        # Test message private pour v√©rifier la connectivit√©
        if event.sender_id == ADMIN_ID:
            await asyncio.sleep(2)
            test_msg = "üîß Test de connectivit√© : Je peux vous envoyer des messages priv√©s !"
            await event.respond(test_msg)

    except Exception as e:
        print(f"Erreur dans start_command: {e}")

# --- COMMANDES ADMINISTRATIVES ---
@client.on(events.NewMessage(pattern='/status'))
async def show_status(event):
    """Show bot status (admin only)"""
    try:
        # Permettre si ADMIN_ID est configur√© ou en mode d√©veloppement
        if ADMIN_ID and event.sender_id != ADMIN_ID:
            return

        # Recharger la configuration pour √©viter les valeurs obsol√®tes
        load_config()

        config_status = "‚úÖ Sauvegard√©e" if os.path.exists(CONFIG_FILE) else "‚ùå Non sauvegard√©e"
        status_msg = f"""üìä **Statut du Bot**

Canal statistiques: {'‚úÖ Configur√©' if detected_stat_channel else '‚ùå Non configur√©'} ({detected_stat_channel})
Canal diffusion: {'‚úÖ Configur√©' if detected_display_channel else '‚ùå Non configur√©'} ({detected_display_channel})
‚è±Ô∏è Intervalle de pr√©diction: {prediction_interval} minutes
Configuration persistante: {config_status}
Pr√©dictions actives: {len(predictor.prediction_status)}
Derni√®res pr√©dictions: {len(predictor.last_predictions)}
"""
        await event.respond(status_msg)
    except Exception as e:
        print(f"Erreur dans show_status: {e}")

@client.on(events.NewMessage(pattern='/reset'))
async def reset_data(event):
    """R√©initialisation des donn√©es (admin uniquement)"""
    try:
        if event.sender_id != ADMIN_ID:
            return

        # R√©initialiser les pr√©dictions en attente
        pending_predictions.clear()

        # R√©initialiser les donn√©es YAML
        await yaml_manager.reset_all_data()

        msg = """üîÑ **Donn√©es r√©initialis√©es avec succ√®s !**

‚úÖ Pr√©dictions en attente: vid√©es
‚úÖ Base de donn√©es YAML: r√©initialis√©e
‚úÖ Configuration: pr√©serv√©e

Le bot est pr√™t pour un nouveau cycle."""

        await event.respond(msg)
        print(f"Donn√©es r√©initialis√©es par l'admin")

    except Exception as e:
        print(f"Erreur dans reset_data: {e}")
        await event.respond(f"‚ùå Erreur lors de la r√©initialisation: {e}")

@client.on(events.NewMessage(pattern='/ni'))
async def ni_command(event):
    """Commande /ni - Informations sur le syst√®me de pr√©diction"""
    try:
        # Utiliser les variables globales configur√©es
        stats_channel = detected_stat_channel or 'Non configur√©'
        display_channel = detected_display_channel or 'Non configur√©'

        # Compter les pr√©dictions actives depuis le predictor
        active_predictions = len([s for s in predictor.prediction_status.values() if s == '‚åõ'])

        msg = f"""üéØ **Syst√®me de Pr√©diction NI - Statut**

üìä **Configuration actuelle**:
‚Ä¢ Canal source: {stats_channel}
‚Ä¢ Canal affichage: {display_channel}
‚Ä¢ Pr√©dictions Excel actives: {active_predictions}
‚Ä¢ Intervalle: {prediction_interval} minute(s)

üéÆ **Fonctionnalit√©s**:
‚Ä¢ Pr√©dictions bas√©es uniquement sur fichier Excel
‚Ä¢ V√©rification s√©quentielle avec offsets 0‚Üí1‚Üí2
‚Ä¢ Format: "üîµXXX üîµV1‚úçüèª: statut :‚è≥" ou "üîµXXX üîµV2‚úçüèª: statut :‚è≥"

üîß **Commandes disponibles**:
‚Ä¢ `/set_stat [ID]` - Configurer canal source
‚Ä¢ `/set_display [ID]` - Configurer canal affichage
‚Ä¢ `/excel_status` - Voir pr√©dictions Excel
‚Ä¢ `/reset` - R√©initialiser les donn√©es
‚Ä¢ `/intervalle [min]` - Configurer d√©lai

‚úÖ **Bot op√©rationnel** - Version 2025"""

        await event.respond(msg)
        print(f"Commande /ni ex√©cut√©e par {event.sender_id}")

    except Exception as e:
        print(f"Erreur dans ni_command: {e}")
        await event.respond(f"‚ùå Erreur: {e}")


@client.on(events.NewMessage(pattern='/test_invite'))
async def test_invite(event):
    """Test sending invitation (admin only)"""
    try:
        if event.sender_id != ADMIN_ID:
            return

        # Test invitation message
        test_msg = f"""üîî **Test d'invitation**

üìã **Canal test** : Canal de test
üÜî **ID** : -1001234567890

**Choisissez le type de canal** :
‚Ä¢ `/set_stat -1001234567890` - Canal de statistiques
‚Ä¢ `/set_display -1001234567890` - Canal de diffusion

Ceci est un message de test pour v√©rifier les invitations."""

        await event.respond(test_msg)
        print(f"Message de test envoy√© √† l'admin")

    except Exception as e:
        print(f"Erreur dans test_invite: {e}")

@client.on(events.NewMessage(pattern='/sta'))
async def show_excel_stats(event):
    """Show Excel predictions statistics"""
    try:
        if event.sender_id != ADMIN_ID:
            return

        # Recharger la configuration pour √©viter les valeurs obsol√®tes
        load_config()

        stats = excel_manager.get_stats()

        msg = f"""üìä **Statut des Pr√©dictions Excel**

üìã **Statistiques Excel**:
‚Ä¢ Total pr√©dictions: {stats['total']}
‚Ä¢ En attente: {stats['pending']}
‚Ä¢ Lanc√©es: {stats['launched']}

üìà **Configuration actuelle**:
‚Ä¢ Canal stats configur√©: {'‚úÖ' if detected_stat_channel else '‚ùå'} ({detected_stat_channel or 'Aucun'})
‚Ä¢ Canal affichage configur√©: {'‚úÖ' if detected_display_channel else '‚ùå'} ({detected_display_channel or 'Aucun'})

üîß **Format de pr√©diction**:
‚Ä¢ V1 (Joueur) : üîµXXX üîµV1‚úçüèª: statut :‚è≥
‚Ä¢ V2 (Banquier) : üîµXXX üîµV2‚úçüèª: statut :‚è≥

‚úÖ Pr√©dictions uniquement depuis fichier Excel"""

        await event.respond(msg)
        print(f"Statut Excel envoy√© √† l'admin")

    except Exception as e:
        print(f"Erreur dans show_excel_stats: {e}")
        await event.respond(f"‚ùå Erreur: {e}")

# Commande /report supprim√©e selon demande utilisateur

@client.on(events.NewMessage(pattern='/scheduler_disabled'))
async def manage_scheduler_disabled(event):
    """Gestion du planificateur automatique (admin uniquement)"""
    global scheduler
    try:
        if event.sender_id != ADMIN_ID:
            return

        # Parse command arguments
        message_parts = event.message.message.split()
        if len(message_parts) < 2:
            await event.respond("""ü§ñ **Commandes du Planificateur Automatique**

**Usage**: `/scheduler [commande]`

**Commandes disponibles**:
‚Ä¢ `start` - D√©marre le planificateur automatique
‚Ä¢ `stop` - Arr√™te le planificateur
‚Ä¢ `status` - Affiche le statut actuel
‚Ä¢ `generate` - G√©n√®re une nouvelle planification
‚Ä¢ `config [source_id] [target_id]` - Configure les canaux

**Exemple**: `/scheduler config -1001234567890 -1001987654321`""")
            return

        command = message_parts[1].lower()

        if command == "start":
            if not scheduler:
                if detected_stat_channel and detected_display_channel:
                    scheduler = PredictionScheduler(
                        client, predictor,
                        detected_stat_channel, detected_display_channel
                    )
                    # D√©marre le planificateur en arri√®re-plan
                    asyncio.create_task(scheduler.run_scheduler())
                    await event.respond("‚úÖ **Planificateur d√©marr√©**\n\nLe syst√®me de pr√©dictions automatiques est maintenant actif.")
                else:
                    await event.respond("‚ùå **Configuration manquante**\n\nVeuillez d'abord configurer les canaux source et cible avec `/set_stat` et `/set_display`.")
            else:
                await event.respond("‚ö†Ô∏è **Planificateur d√©j√† actif**\n\nUtilisez `/scheduler stop` pour l'arr√™ter.")

        elif command == "stop":
            if scheduler:
                scheduler.stop_scheduler()
                scheduler = None
                await event.respond("üõë **Planificateur arr√™t√©**\n\nLes pr√©dictions automatiques sont d√©sactiv√©es.")
            else:
                await event.respond("‚ÑπÔ∏è **Planificateur non actif**\n\nUtilisez `/scheduler start` pour le d√©marrer.")

        elif command == "status":
            if scheduler:
                status = scheduler.get_schedule_status()
                status_msg = f"""üìä **Statut du Planificateur**

üîÑ **√âtat**: {'üü¢ Actif' if status['is_running'] else 'üî¥ Inactif'}
üìã **Planification**:
‚Ä¢ Total de pr√©dictions: {status['total']}
‚Ä¢ Pr√©dictions lanc√©es: {status['launched']}
‚Ä¢ Pr√©dictions v√©rifi√©es: {status['verified']}
‚Ä¢ En attente: {status['pending']}

‚è∞ **Prochaine pr√©diction**: {status['next_launch'] or 'Aucune'}

üîß **Configuration**:
‚Ä¢ Canal source: {detected_stat_channel}
‚Ä¢ Canal cible: {detected_display_channel}"""
                await event.respond(status_msg)
            else:
                await event.respond("‚ÑπÔ∏è **Planificateur non configur√©**\n\nUtilisez `/scheduler start` pour l'activer.")

        elif command == "generate":
            if scheduler:
                scheduler.regenerate_schedule()
                await event.respond("üîÑ **Nouvelle planification g√©n√©r√©e**\n\nLa planification quotidienne a √©t√© r√©g√©n√©r√©e avec succ√®s.")
            else:
                # Cr√©e un planificateur temporaire pour g√©n√©rer
                temp_scheduler = PredictionScheduler(client, predictor, 0, 0)
                temp_scheduler.regenerate_schedule()
                await event.respond("‚úÖ **Planification g√©n√©r√©e**\n\nFichier `prediction.yaml` cr√©√©. Utilisez `/scheduler start` pour activer.")

        elif command == "config" and len(message_parts) >= 4:
            source_id = int(message_parts[2])
            target_id = int(message_parts[3])

            # Met √† jour la configuration globale
            update_channel_config(source_id, target_id)

            await event.respond(f"""‚úÖ **Configuration mise √† jour**

üì• **Canal source**: {source_id}
üì§ **Canal cible**: {target_id}

Utilisez `/scheduler start` pour activer le planificateur.""")

        else:
            await event.respond("‚ùå **Commande inconnue**\n\nUtilisez `/scheduler` sans param√®tre pour voir l'aide.")

    except Exception as e:
        print(f"Erreur dans manage_scheduler: {e}")
        await event.respond(f"‚ùå Erreur: {e}")

@client.on(events.NewMessage(pattern='/schedule_info_disabled'))
async def schedule_info_disabled(event):
    """Affiche les informations d√©taill√©es de la planification (admin uniquement)"""
    try:
        if event.sender_id != ADMIN_ID:
            return

        if scheduler and scheduler.schedule_data:
            # Affiche les 10 prochaines pr√©dictions
            current_time = scheduler.get_current_time_slot()
            upcoming = []

            for numero, data in scheduler.schedule_data.items():
                if (not data["launched"] and
                    data["heure_lancement"] >= current_time):
                    upcoming.append((numero, data["heure_lancement"]))

            upcoming.sort(key=lambda x: x[1])
            upcoming = upcoming[:10]  # Limite √† 10

            msg = "üìÖ **Prochaines Pr√©dictions Automatiques**\n\n"
            for numero, heure in upcoming:
                msg += f"üîµ {numero} ‚Üí {heure}\n"

            if not upcoming:
                msg += "‚ÑπÔ∏è Aucune pr√©diction en attente pour aujourd'hui."

            await event.respond(msg)
        else:
            await event.respond("‚ùå **Aucune planification active**\n\nUtilisez `/scheduler generate` pour cr√©er une planification.")

    except Exception as e:
        print(f"Erreur dans schedule_info: {e}")
        await event.respond(f"‚ùå Erreur: {e}")

@client.on(events.NewMessage(pattern='/intervalle'))
async def set_prediction_interval(event):
    """Configure l'intervalle avant que le syst√®me cherche 'A' (admin uniquement)"""
    global prediction_interval
    try:
        if event.sender_id != ADMIN_ID:
            return

        # Parse command arguments
        message_parts = event.message.message.split()

        if len(message_parts) < 2:
            await event.respond(f"""‚è±Ô∏è **Configuration de l'Intervalle de Pr√©diction**

**Usage**: `/intervalle [minutes]`

**Intervalle actuel**: {prediction_interval} minutes

**Description**:
D√©finit le temps d'attente en minutes avant que le syst√®me commence √† analyser les messages pour chercher la lettre 'A' dans les parenth√®ses et d√©clencher les pr√©dictions.

**Exemples**:
‚Ä¢ `/intervalle 3` - Attendre 3 minutes
‚Ä¢ `/intervalle 10` - Attendre 10 minutes
‚Ä¢ `/intervalle 1` - Attendre 1 minute

**Recommand√©**: Entre 1 et 15 minutes""")
            return

        try:
            new_interval = int(message_parts[1])
            if new_interval < 1 or new_interval > 60:
                await event.respond("‚ùå **Erreur**: L'intervalle doit √™tre entre 1 et 60 minutes")
                return

            old_interval = prediction_interval
            prediction_interval = new_interval

            # Sauvegarder la configuration
            save_config()

            await event.respond(f"""‚úÖ **Intervalle mis √† jour**

‚è±Ô∏è **Ancien intervalle**: {old_interval} minutes
‚è±Ô∏è **Nouvel intervalle**: {prediction_interval} minutes

Le syst√®me attendra maintenant {prediction_interval} minute(s) avant de commencer l'analyse des messages pour la d√©tection des 'A' dans les parenth√®ses.

Configuration sauvegard√©e automatiquement.""")

            print(f"‚úÖ Intervalle de pr√©diction mis √† jour: {old_interval} ‚Üí {prediction_interval} minutes")

        except ValueError:
            await event.respond("‚ùå **Erreur**: Veuillez entrer un nombre valide de minutes")

    except Exception as e:
        print(f"Erreur dans set_prediction_interval: {e}")
        await event.respond(f"‚ùå Erreur: {e}")

@client.on(events.NewMessage(pattern='/excel_status'))
async def excel_status(event):
    """Affiche le statut des pr√©dictions Excel (admin uniquement)"""
    try:
        if event.sender_id != ADMIN_ID:
            return

        stats = excel_manager.get_stats()
        pending = excel_manager.get_pending_predictions()

        msg = f"""üìä **Statut Pr√©dictions Excel**

üìà **Statistiques**:
‚Ä¢ Total: {stats['total']}
‚Ä¢ En attente: {stats['pending']}
‚Ä¢ Lanc√©es: {stats['launched']}

üìã **Prochaines pr√©dictions en attente** (max 10):
"""

        for i, pred in enumerate(pending[:10]):
            victoire_icon = "‚úÖV1" if "joueur" in pred["victoire"].lower() else "‚úÖV2"
            msg += f"\n{i+1}. üîµ{pred['numero']} {victoire_icon} - {pred['date_heure']}"

        if stats['pending'] == 0:
            msg += "\n‚ÑπÔ∏è Aucune pr√©diction en attente"

        msg += f"""

üí° **Comment √ßa marche**:
‚Ä¢ Le bot surveille le canal source
‚Ä¢ Quand un num√©ro proche est d√©tect√©, la pr√©diction est lanc√©e automatiquement
‚Ä¢ Format V1 pour victoire Joueur, V2 pour victoire Banquier

üì§ **Pour importer**: Envoyez simplement votre fichier Excel (.xlsx)"""

        await event.respond(msg)
        print(f"Statut Excel envoy√© √† l'admin")

    except Exception as e:
        print(f"Erreur dans excel_status: {e}")
        await event.respond(f"‚ùå Erreur: {e}")

@client.on(events.NewMessage(pattern='/excel_clear'))
async def excel_clear(event):
    """Efface toutes les pr√©dictions Excel (admin uniquement)"""
    try:
        if event.sender_id != ADMIN_ID:
            return

        excel_manager.clear_predictions()
        await event.respond("üóëÔ∏è **Toutes les pr√©dictions Excel ont √©t√© effac√©es**\n\nVous pouvez maintenant importer un nouveau fichier Excel.")
        print("‚úÖ Pr√©dictions Excel effac√©es par l'admin")

    except Exception as e:
        print(f"Erreur dans excel_clear: {e}")
        await event.respond(f"‚ùå Erreur: {e}")

@client.on(events.NewMessage(pattern='/deploy'))
async def generate_deploy_package(event):
    """G√©n√®re le package de d√©ploiement Replit complet et pr√™t √† d√©ployer (admin uniquement)"""
    try:
        if event.sender_id != ADMIN_ID:
            return

        await event.respond("üöÄ **G√©n√©ration du package Replit avec auto-configuration...**")

        try:
            package_name = 'replit_deployment_complete.zip'

            with zipfile.ZipFile(package_name, 'w', zipfile.ZIP_DEFLATED) as zipf:
                # 1. Fichiers Python essentiels du projet
                python_files = [
                    'main.py',
                    'predictor.py',
                    'yaml_manager.py',
                    'excel_importer.py'
                ]

                for file_path in python_files:
                    if os.path.exists(file_path):
                        zipf.write(file_path)
                        print(f"  ‚úÖ Ajout√©: {file_path}")

                # 2. Cr√©er bot_config.json avec la configuration actuelle
                config_data = {
                    'stat_channel': detected_stat_channel,
                    'display_channel': detected_display_channel,
                    'prediction_interval': prediction_interval
                }
                zipf.writestr('bot_config.json', json.dumps(config_data, indent=2))
                print("  ‚úÖ Cr√©√©: bot_config.json avec configuration actuelle")

                # 3. Cr√©er .replit (configuration Replit)
                replit_content = f"""run = "python main.py"
entrypoint = "main.py"
modules = ["python-3.11"]

[nix]
channel = "stable-24_05"

[deployment]
run = ["python", "main.py"]
deploymentTarget = "cloudrun"

[env]
PORT = "{PORT}"
DISPLAY_CHANNEL = "{detected_display_channel or DISPLAY_CHANNEL}"
PREDICTION_INTERVAL = "{prediction_interval}"
"""
                zipf.writestr('.replit', replit_content)
                print("  ‚úÖ Cr√©√©: .replit")
                
                # 3. Cr√©er replit.nix
                nix_content = """{ pkgs }: {
  deps = [
    pkgs.python311
    pkgs.python311Packages.pip
  ];
}
"""
                zipf.writestr('replit.nix', nix_content)
                print("  ‚úÖ Cr√©√©: replit.nix")

                # 4. Fichier .env.example
                env_example_content = f"""# Configuration Telegram Bot - Replit
# Ajoutez ces secrets dans Replit Secrets

API_ID=votre_api_id
API_HASH=votre_api_hash
BOT_TOKEN=votre_bot_token
ADMIN_ID=votre_admin_id

# Configuration automatique
PORT=10000
DISPLAY_CHANNEL=-1002999811353
PREDICTION_INTERVAL={prediction_interval}
"""
                zipf.writestr('.env.example', env_example_content)
                print("  ‚úÖ Cr√©√©: .env.example")

                # 5. requirements.txt complet
                requirements_content = """telethon==1.35.0
aiohttp==3.9.5
python-dotenv==1.0.1
pyyaml==6.0.1
openpyxl==3.1.2
"""
                zipf.writestr('requirements.txt', requirements_content)
                print("  ‚úÖ Cr√©√©: requirements.txt")

                # 7. .gitignore pour √©viter d'uploader des fichiers sensibles
                gitignore_content = """# Fichiers sensibles
.env
*.session
*.session-journal

# Fichiers temporaires
__pycache__/
*.pyc
*.pyo
*.pyd
.Python

# Logs
*.log

# Donn√©es locales
data/
*.yaml

# IDE
.vscode/
.idea/
*.swp
*.swo

# OS
.DS_Store
Thumbs.db
"""
                zipf.writestr('.gitignore', gitignore_content)
                print("  ‚úÖ Cr√©√©: .gitignore")

                # 6. README.md complet avec instructions Replit
                readme_content = f"""# üì¶ Bot Telegram - Package Replit Complet

## üéØ Package Pr√™t pour D√©ploiement avec Auto-Configuration

Ce package contient **TOUS** les fichiers n√©cessaires pour d√©ployer le bot sur **Replit** avec **configuration automatique** des canaux.

---

## üìã Fichiers Inclus

### Code Source (‚úÖ Complet)
- `main.py` - Bot principal avec toutes les fonctionnalit√©s
- `predictor.py` - Moteur de pr√©diction Excel
- `yaml_manager.py` - Gestionnaire de donn√©es YAML
- `excel_importer.py` - Import et gestion Excel

### Configuration (‚úÖ Auto-configur√©e)
- `.replit` - Configuration Replit
- `replit.nix` - D√©pendances syst√®me
- `requirements.txt` - D√©pendances Python
- `bot_config.json` - Configuration des canaux (pr√©-configur√©)
- `.env.example` - Template variables d'environnement
- `.gitignore` - Fichiers √† ignorer

---

## üöÄ D√©ploiement sur Replit

### √âtape 1: Cr√©er un nouveau Repl
1. Aller sur [replit.com](https://replit.com)
2. Cr√©er un nouveau Repl Python
3. Uploader tous les fichiers du ZIP

### √âtape 2: Configurer les Secrets
1. Cliquer sur l'ic√¥ne "üîí Secrets" dans le panneau de gauche
2. Ajouter ces variables:
```
API_ID = votre_api_id_telegram
API_HASH = votre_api_hash_telegram
BOT_TOKEN = votre_bot_token
ADMIN_ID = votre_telegram_user_id
```

### √âtape 3: Lancer le Bot
1. Cliquer sur le bouton **Run** vert en haut
2. Le bot d√©marrera automatiquement avec les canaux pr√©-configur√©s
3. V√©rifier les logs pour confirmation

---

## ‚ú® Configuration Automatique des Canaux

### üìä Canaux Pr√©-Configur√©s

Le fichier `bot_config.json` contient d√©j√† vos canaux:
- **Canal Stats**: {config_data['stat_channel'] or '√Ä configurer'}
- **Canal Display**: {config_data['display_channel'] or '√Ä configurer'}
- **Intervalle**: {config_data['prediction_interval']} minute(s)

### üîÑ Le Bot Fonctionne Directement

Une fois d√©ploy√© et ajout√© aux canaux:
1. **Pas besoin de configuration manuelle** - Les canaux sont d√©j√† enregistr√©s
2. **D√©tection automatique** - Le bot utilise `bot_config.json` au d√©marrage
3. **Fonctionnement imm√©diat** - Les pr√©dictions commencent d√®s l'ajout du bot

### üõ†Ô∏è Modifier la Configuration (Optionnel)

Si vous voulez changer les canaux apr√®s d√©ploiement:
- `/force_set_stat [ID]` - Changer le canal stats
- `/force_set_display [ID]` - Changer le canal display
- `/intervalle [min]` - Ajuster l'intervalle

---

## üîß Fonctionnalit√©s D√©ploy√©es

### ‚úÖ Pr√©dictions Excel Automatiques
- Import fichiers Excel (.xlsx)
- Surveillance du canal source
- Lancement anticip√© (tol√©rance 0-4 parties)
- **Filtrage automatique des num√©ros cons√©cutifs**
- Format V1 (Joueur) / V2 (Banquier)
- V√©rification avec offsets (0, 1, 2)

### üìã Format des Messages de Pr√©diction

**Au lancement:**
- Victoire Joueur: `üîµXXX üîµV1‚úçüèª: statut :‚è≥‚è≥`
- Victoire Banquier: `üîµXXX üîµV2‚úçüèª: statut :‚è≥‚è≥`

**Apr√®s v√©rification:**
- Exact (offset 0): `üîµXXX üîµV1‚úçüèª: statut :‚úÖ0Ô∏è‚É£`
- Offset +1: `üîµXXX üîµV1‚úçüèª: statut :‚úÖ1Ô∏è‚É£`
- Offset +2: `üîµXXX üîµV1‚úçüèª: statut :‚úÖ2Ô∏è‚É£`
- √âchec: `üîµXXX üîµV1‚úçüèª: statut :‚≠ï‚úçüèª`

### ‚úÖ Commandes Admin
- `/start` - Aide et bienvenue
- `/status` - √âtat du bot
- `/excel_status` - Statut pr√©dictions Excel
- `/excel_clear` - Effacer pr√©dictions
- `/sta` - Statistiques Excel
- `/intervalle [min]` - Configurer d√©lai
- `/reset` - R√©initialisation
- `/deploy` - Cr√©er package

---

## üìä Configuration Actuelle

| Param√®tre | Valeur |
|-----------|--------|
| **Port** | 10000 |
| **Canal Stats** | {config_data['stat_channel']} |
| **Canal Display** | {config_data['display_channel']} |
| **Intervalle** | {config_data['prediction_interval']} minute(s) |
| **Format V1** | üîµXXX üîµV1‚úçüèª: statut :‚è≥‚è≥ |
| **Format V2** | üîµXXX üîµV2‚úçüèª: statut :‚è≥‚è≥ |

---

## üì• Format Excel Requis

| Date & Heure | Num√©ro | Victoire (Joueur/Banquier) |
|--------------|--------|----------------------------|
| 03/01/2025 - 14:20 | 881 | Banquier |
| 03/01/2025 - 14:26 | 886 | Joueur |
| 03/01/2025 - 14:40 | 891 | Joueur |

**Note:** Les num√©ros cons√©cutifs (ex: 23‚Üí24) sont automatiquement filtr√©s √† l'import.

---

## üéØ Support

**D√©velopp√© par:** Sossou Kouam√© Appolinaire  
**Version:** {datetime.now().strftime('%Y-%m-%d %H:%M')}  
**Plateforme:** Replit

**üöÄ Le bot est 100% pr√™t pour Replit!**
"""
                zipf.writestr('README.md', readme_content)
                print("  ‚úÖ Cr√©√©: README.md")

                # 9. Dossier data/ avec structure
                zipf.writestr('data/.gitkeep', '# Dossier pour fichiers YAML\n# Cr√©√© automatiquement par le bot\n')
                print("  ‚úÖ Cr√©√©: data/.gitkeep")

                # 10. Procfile (optionnel, pour compatibilit√© Heroku)
                procfile_content = "web: python render_main.py"
                zipf.writestr('Procfile', procfile_content)
                print("  ‚úÖ Cr√©√©: Procfile")

            file_size = os.path.getsize(package_name) / 1024

            # Lire depuis bot_config.json pour garantir les bonnes valeurs
            config_stats = detected_stat_channel or "Non configur√©"
            config_display = detected_display_channel or "Non configur√©"
            
            canal_stats_info = f"‚Ä¢ Canal Stats: {config_stats} ‚úÖ" if detected_stat_channel else "‚Ä¢ Canal Stats: √Ä configurer ‚ö†Ô∏è"
            canal_display_info = f"‚Ä¢ Canal Display: {config_display} ‚úÖ" if detected_display_channel else "‚Ä¢ Canal Display: √Ä configurer ‚ö†Ô∏è"

            await event.respond(f"""‚úÖ **PACKAGE REPLIT AVEC AUTO-CONFIG CR√â√â!**

üì¶ **Fichier:** {package_name} ({file_size:.1f} KB)

üìã **Contenu (11 fichiers):**
‚úÖ Code source complet (4 fichiers Python)
‚úÖ .replit + replit.nix - Config Replit
‚úÖ requirements.txt - D√©pendances
‚úÖ bot_config.json - **Configuration pr√©-enregistr√©e** üÜï
‚úÖ .env.example - Template variables
‚úÖ .gitignore - S√©curit√©
‚úÖ README.md - Guide complet
‚úÖ data/ - Structure dossiers

üîß **Configuration Automatique:**
{canal_stats_info}
{canal_display_info}
‚Ä¢ Intervalle: {prediction_interval} minute(s) ‚úÖ
‚Ä¢ Port: {PORT} ‚úÖ

‚ú® **Fonctionnement Imm√©diat:**
Le bot utilise `bot_config.json` au d√©marrage - **aucune configuration manuelle requise** apr√®s l'ajout aux canaux!

üìã **Format des messages de pr√©diction:**
‚Ä¢ Lancement: üîµXXX üîµV1‚úçüèª: statut :‚è≥‚è≥
‚Ä¢ Succ√®s exact: üîµXXX üîµV1‚úçüèª: statut :‚úÖ0Ô∏è‚É£
‚Ä¢ Succ√®s +1: üîµXXX üîµV1‚úçüèª: statut :‚úÖ1Ô∏è‚É£
‚Ä¢ Succ√®s +2: üîµXXX üîµV1‚úçüèª: statut :‚úÖ2Ô∏è‚É£
‚Ä¢ √âchec: üîµXXX üîµV1‚úçüèª: statut :‚≠ï‚úçüèª

üöÄ **3 √©tapes pour d√©ployer:**
1. Cr√©er un nouveau Repl Python sur Replit
2. Uploader tous les fichiers
3. Configurer les Secrets (API_ID, API_HASH, BOT_TOKEN, ADMIN_ID) et Run

üìñ **Guide complet dans README.md**

Le package est 100% pr√™t avec auto-configuration! üéâ""")

            # Envoyer le fichier
            await client.send_file(
                event.chat_id,
                package_name,
                caption=f"üì¶ **Package Replit Complet v{datetime.now().strftime('%Y%m%d')}** - Pr√™t pour d√©ploiement!"
            )

            print(f"‚úÖ Package cr√©√©: {package_name} ({file_size:.1f} KB)")

        except Exception as e:
            await event.respond(f"‚ùå Erreur cr√©ation package: {str(e)}")
            print(f"‚ùå Erreur: {e}")

    except Exception as e:
        print(f"Erreur /deploy: {e}")

# --- TRAITEMENT DES MESSAGES DU CANAL DE STATISTIQUES ---
@client.on(events.NewMessage())
@client.on(events.MessageEdited())
async def handle_messages(event):
    """Handle messages from statistics channel"""
    try:
        # Handle Excel file import from admin (before any other checks)
        if event.sender_id == ADMIN_ID and event.message.media and event.message.file:
            file_name = event.message.file.name
            if file_name and (file_name.endswith('.xlsx') or file_name.endswith('.xls')):
                await event.respond("üì• **T√©l√©chargement du fichier Excel...**")
                file_path = await event.message.download_media()
                await event.respond("‚öôÔ∏è **Importation des pr√©dictions...**")

                result = excel_manager.import_excel(file_path)
                os.remove(file_path)

                if result["success"]:
                    stats = excel_manager.get_stats()
                    consecutive_info = f"\n‚Ä¢ Num√©ros cons√©cutifs ignor√©s: {result.get('consecutive_skipped', 0)}" if result.get('consecutive_skipped', 0) > 0 else ""
                    msg = f"""‚úÖ **Import Excel r√©ussi!**

üìä **R√©sum√©**:
‚Ä¢ Pr√©dictions import√©es: {result['imported']}
‚Ä¢ Pr√©dictions ignor√©es (d√©j√† lanc√©es): {result['skipped']}{consecutive_info}
‚Ä¢ Total en base: {stats['total']}

üìã **Statistiques**:
‚Ä¢ En attente: {stats['pending']}
‚Ä¢ Lanc√©es: {stats['launched']}

‚ö†Ô∏è **Note**: Les num√©ros cons√©cutifs (ex: 23‚Üí24) sont automatiquement filtr√©s pour √©viter les doublons.

Le syst√®me surveillera maintenant le canal source et lancera les pr√©dictions automatiquement quand les num√©ros seront proches."""
                    await event.respond(msg)
                    print(f"‚úÖ Import Excel r√©ussi: {result['imported']} pr√©dictions import√©es, {result.get('consecutive_skipped', 0)} cons√©cutifs ignor√©s")
                else:
                    await event.respond(f"‚ùå **Erreur lors de l'import**: {result['error']}")
                    print(f"‚ùå Erreur import Excel: {result['error']}")
                return

        # Debug: Log ALL incoming messages first
        message_text = event.message.message if event.message else "Pas de texte"
        channel_id = event.chat_id
        print(f"üì¨ TOUS MESSAGES: Canal {channel_id} | Texte: {message_text[:100]}")
        print(f"üîß Canal stats configur√©: {detected_stat_channel}")

        # Ignorer les messages priv√©s qui ne sont PAS des commandes
        if ADMIN_ID and channel_id == ADMIN_ID and not message_text.startswith('/'):
            print(f"‚è≠Ô∏è Message priv√© admin ignor√© (pas une commande)")
            return

        # Filtrer silencieusement les messages hors canal stats
        if channel_id != detected_stat_channel:
            return

        print(f"üì¨ MESSAGE STATS: Canal {channel_id}")
        print(f"‚úÖ Texte: {message_text[:100]}..." if len(message_text) > 100 else f"‚úÖ Texte: {message_text}")

        if not message_text:
            print("‚ùå Message vide ignor√©")
            return

        print(f"‚úÖ Message accept√© du canal stats {event.chat_id}: {message_text}")

        # EXCEL MONITORING: V√©rifier si un num√©ro proche est dans les pr√©dictions Excel
        game_number = predictor.extract_game_number(message_text)
        if game_number:
            # D√©clenchement quand canal source affiche 0-4 parties AVANT le num√©ro Excel
            # Ex: Excel #881, Canal #879 ‚Üí Lance #881 (√©cart +2)
            close_pred = excel_manager.find_close_prediction(game_number, tolerance=4)
            if close_pred and detected_display_channel:
                pred_key = close_pred["key"]
                pred_data = close_pred["prediction"]
                pred_numero = pred_data["numero"]
                victoire_type = pred_data["victoire"]

                v_format = excel_manager.get_prediction_format(victoire_type)
                prediction_text = f"üîµ{pred_numero} {v_format}‚úçüèª: statut :‚è≥‚è≥"

                try:
                    sent_message = await client.send_message(detected_display_channel, prediction_text)
                    excel_manager.mark_as_launched(pred_key, sent_message.id, detected_display_channel)

                    # Enregistrer la pr√©diction dans le predictor pour la v√©rification
                    predictor.prediction_status[pred_numero] = '‚åõ'
                    predictor.store_prediction_message(pred_numero, sent_message.id, detected_display_channel)

                    ecart = pred_numero - game_number
                    print(f"‚úÖ Pr√©diction Excel lanc√©e: üîµ{pred_numero} {v_format} | Canal source: #{game_number} (√©cart: +{ecart} parties)")
                except Exception as e:
                    print(f"‚ùå Erreur envoi pr√©diction Excel: {e}")

            # V√©rification des pr√©dictions Excel lanc√©es (avec offset 0, 1, 2)
            for key, pred in list(excel_manager.predictions.items()):
                if not pred["launched"] or "verified" in pred:
                    continue

                pred_numero = pred["numero"]
                expected_winner = pred["victoire"]

                status = excel_manager.verify_excel_prediction(game_number, message_text, pred_numero, expected_winner)

                if status:
                    # Mettre √† jour le message de pr√©diction
                    msg_id = pred.get("message_id")
                    channel_id = pred.get("channel_id")

                    if msg_id and channel_id:
                        v_format = excel_manager.get_prediction_format(expected_winner)
                        new_text = f"üîµ{pred_numero} {v_format}‚úçüèª: statut :{status}"

                        try:
                            await client.edit_message(channel_id, msg_id, new_text)
                            pred["verified"] = True
                            excel_manager._save_predictions()
                            print(f"‚úÖ Pr√©diction Excel #{pred_numero} mise √† jour: {status}")
                        except Exception as e:
                            print(f"‚ùå Erreur mise √† jour pr√©diction Excel: {e}")

        # Check for prediction verification
        verified, number = predictor.verify_prediction(message_text)
        if verified is not None and number is not None:
            statut = predictor.prediction_status.get(number, 'Inconnu')
            # Edit the original prediction message instead of sending new message
            success = await edit_prediction_message(number, statut)
            if success:
                print(f"‚úÖ Message de pr√©diction #{number} mis √† jour avec statut: {statut}")
            else:
                print(f"‚ö†Ô∏è Impossible de mettre √† jour le message #{number}, envoi d'un nouveau message")
                status_text = f"üîµ{number} statut :{statut}"
                await broadcast(status_text)

        # Check for expired predictions on every valid result message
        game_number = predictor.extract_game_number(message_text)
        if game_number and not ("‚è∞" in message_text or "üïê" in message_text):
            expired = predictor.check_expired_predictions(game_number)
            for expired_num in expired:
                # Edit expired prediction messages
                success = await edit_prediction_message(expired_num, '‚ùå')
                if success:
                    print(f"‚úÖ Message de pr√©diction expir√©e #{expired_num} mis √† jour avec ‚ùå")
                else:
                    print(f"‚ö†Ô∏è Impossible de mettre √† jour le message expir√© #{expired_num}")
                    status_text = f"üîµ{expired_num} statut :‚ùå"
                    await broadcast(status_text)

        # Scheduler d√©sactiv√© - syst√®me Excel uniquement

        # Bilan automatique supprim√© sur demande utilisateur

    except Exception as e:
        print(f"Erreur dans handle_messages: {e}")

async def broadcast(message):
    """Broadcast message to display channel"""
    global detected_display_channel

    sent_messages = []
    if detected_display_channel:
        try:
            sent_message = await client.send_message(detected_display_channel, message)
            sent_messages.append((detected_display_channel, sent_message.id))
            print(f"Message diffus√©: {message}")
        except Exception as e:
            print(f"Erreur lors de l'envoi: {e}")
    else:
        print("‚ö†Ô∏è Canal d'affichage non configur√©")

    return sent_messages

async def edit_prediction_message(game_number: int, new_status: str):
    """Edit prediction message with new status"""
    try:
        message_info = predictor.get_prediction_message(game_number)
        if message_info:
            chat_id = message_info['chat_id']
            message_id = message_info['message_id']
            new_text = f"üîµ{game_number} statut :{new_status}"

            await client.edit_message(chat_id, message_id, new_text)
            print(f"Message de pr√©diction #{game_number} mis √† jour avec statut: {new_status}")
            return True
    except Exception as e:
        print(f"Erreur lors de la modification du message: {e}")
    return False

# Code de g√©n√©ration de rapport supprim√© selon demande utilisateur

# --- ENVOI VERS LES CANAUX ---
# (Function moved above to handle message editing)

# --- GESTION D'ERREURS ET RECONNEXION ---
async def handle_connection_error():
    """Handle connection errors and attempt reconnection"""
    print("Tentative de reconnexion...")
    await asyncio.sleep(5)
    try:
        await client.connect()
        print("Reconnexion r√©ussie")
    except Exception as e:
        print(f"√âchec de la reconnexion: {e}")

# --- SERVEUR WEB POUR MONITORING ---
async def health_check(request):
    """Health check endpoint"""
    return web.Response(text="Bot is running!", status=200)

async def bot_status(request):
    """Bot status endpoint"""
    status = {
        "bot_online": True,
        "stat_channel": detected_stat_channel,
        "display_channel": detected_display_channel,
        "predictions_active": len(predictor.prediction_status),
        "total_predictions": len(predictor.status_log)
    }
    return web.json_response(status)

async def create_web_server():
    """Create and start web server"""
    app = web.Application()
    app.router.add_get('/', health_check)
    app.router.add_get('/health', health_check)
    app.router.add_get('/status', bot_status)

    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', PORT)
    await site.start()
    print(f"‚úÖ Serveur web d√©marr√© sur 0.0.0.0:{PORT}")
    return runner

# --- LANCEMENT ---
async def main():
    """Main function to start the bot"""
    print("D√©marrage du bot Telegram...")
    print(f"API_ID: {API_ID}")
    print(f"Bot Token configur√©: {'Oui' if BOT_TOKEN else 'Non'}")
    print(f"Port web: {PORT}")

    # Validate configuration
    if not API_ID or not API_HASH or not BOT_TOKEN:
        print("‚ùå Configuration manquante! V√©rifiez votre fichier .env")
        return

    try:
        # Start web server first
        web_runner = await create_web_server()

        # Start the bot
        if await start_bot():
            print("‚úÖ Bot en ligne et en attente de messages...")
            print(f"üåê Acc√®s web: http://0.0.0.0:{PORT}")
            await client.run_until_disconnected()
        else:
            print("‚ùå √âchec du d√©marrage du bot")

    except KeyboardInterrupt:
        print("\nüõë Arr√™t du bot demand√© par l'utilisateur")
    except Exception as e:
        print(f"‚ùå Erreur critique: {e}")
        await handle_connection_error()
    finally:
        try:
            await client.disconnect()
            print("Bot d√©connect√© proprement")
        except:
            pass

if __name__ == "__main__":
    asyncio.run(main())